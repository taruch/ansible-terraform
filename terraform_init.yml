---
- name: Orchestrate Terraform to Deploy AWS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  environment:
    # Ensure these environment variables are set in your shell before running the playbook.
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    AWS_REGION: "{{ lookup('env', 'AWS_REGION') }}"

  vars:
    # Set the desired AWS region and EC2 instance type here.
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    instance_type: "t2.micro"
    # New variable for the Terraform state bucket name.
    # terraform_state_bucket: "ansible-terraform-state-{{ lookup('env', 'AWS_ACCOUNT_ID') }}"
    terraform_state_bucket: "aap-tf-bucket-5abacb29-72ff-48ac-afeb-ec4f3cf6f0d6"
    terraform_project_path: "./terraform_files"

  tasks:
    - name: Ensure Terraform files directory exists
      ansible.builtin.file:
        path: "{{ terraform_project_path }}"
        state: directory

    - name: Apply the Terraform configuration
      cloud.terraform.terraform:
        project_path: "{{ terraform_project_path }}"
        state: present
        # variables_file: "terraform.tfvars"
        force_init: true
        backend_config:
          bucket: "{{ terraform_state_bucket }}"
          key: "ec2-instance/terraform.tfstate"
          region: "{{ aws_region }}"
          access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
          secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      register: terraform_apply_output

    - name: Display the Terraform apply output
      ansible.builtin.debug:
        var: terraform_apply_output.stdout_lines

    # Optional task to destroy the infrastructure
    - name: Destroy the Terraform configuration
      cloud.terraform.terraform:
        project_path: "{{ terraform_project_path }}"
        command: destroy
        variables_file: "terraform.tfvars"
        force_init: true
        backend_config:
          bucket: "{{ terraform_state_bucket }}"
          key: "ansible/terraform.tfstate"
          region: "{{ aws_region }}"
      register: terraform_destroy_output
      when: false # Set this to 'true' to run the destroy command.

    - name: Display the Terraform destroy output
      ansible.builtin.debug:
        var: terraform_destroy_output.stdout_lines
      when: terraform_destroy_output is defined and false # Set 'when' to 'true' when running destroy.
