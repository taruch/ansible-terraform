---
- name: Orchestrate Terraform to Deploy AWS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  environment:
    # Ensure these environment variables are set in your shell before running the playbook.
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    AWS_REGION: "{{ lookup('env', 'AWS_REGION') }}"

  vars:
    # Set the desired AWS region and EC2 instance type here.
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    instance_type: "t2.micro"
    # New variable for the Terraform state bucket name.
    # terraform_state_bucket: "ansible-terraform-state-{{ lookup('env', 'AWS_ACCOUNT_ID') }}"
    terraform_state_bucket: "aap-tf-bucket-5abacb29-72ff-48ac-afeb-ec4f3cf6f0d6"
    terraform_project_path: "./terraform_files"

  tasks:
    - name: Ensure Terraform files directory exists
      ansible.builtin.file:
        path: "{{ terraform_project_path }}"
        state: directory

    - name: Create S3 bucket for Terraform state
      amazon.aws.s3_bucket:
        name: "{{ terraform_state_bucket }}"
        state: present
        region: "{{ aws_region }}"
      register: s3_bucket_state_result

    # - name: Create the main.tf Terraform configuration file
    #   ansible.builtin.copy:
    #     dest: "{{ terraform_project_path }}/main.tf"
    #     content: |
    #       # --- main.tf ---
    #       # Terraform backend configuration is now managed by the Ansible playbook itself
    #       # using the `backend_config` parameter of the `cloud.terraform.terraform` module.

    #       provider "aws" {
    #         region = var.aws_region
    #       }

    #       resource "aws_instance" "web_server" {
    #         ami           = "ami-0c55b159cbfafe1f0"
    #         instance_type = var.instance_type
    #         tags = {
    #           Name = "Ansible-Managed-Server"
    #         }
    #       }

    #       variable "aws_region" {
    #         type = string
    #       }

    #       variable "instance_type" {
    #         type = string
    #       }
    #     mode: '0644'

    # - name: Create the terraform.tfvars file to pass variables
    #   ansible.builtin.copy:
    #     dest: "{{ terraform_project_path }}/terraform.tfvars"
    #     content: |
    #       # --- terraform.tfvars ---
    #       aws_region = "{{ aws_region }}"
    #       instance_type = "{{ instance_type }}"
    #     mode: '0644'

    - name: Apply the Terraform configuration
      cloud.terraform.terraform:
        project_path: "{{ terraform_project_path }}"
        state: present
        # variables_file: "terraform.tfvars"
        force_init: true
        backend_config:
          bucket: "{{ terraform_state_bucket }}"
          key: "ec2-instance/terraform.tfstate"
          region: "{{ aws_region }}"
          access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
          secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      register: terraform_apply_output

    - name: Display the Terraform apply output
      ansible.builtin.debug:
        var: terraform_apply_output.stdout_lines

    # Optional task to destroy the infrastructure
    - name: Destroy the Terraform configuration
      cloud.terraform.terraform:
        project_path: "{{ terraform_project_path }}"
        command: destroy
        variables_file: "terraform.tfvars"
        force_init: true
        backend_config:
          bucket: "{{ terraform_state_bucket }}"
          key: "ansible/terraform.tfstate"
          region: "{{ aws_region }}"
      register: terraform_destroy_output
      when: false # Set this to 'true' to run the destroy command.

    - name: Display the Terraform destroy output
      ansible.builtin.debug:
        var: terraform_destroy_output.stdout_lines
      when: terraform_destroy_output is defined and false # Set 'when' to 'true' when running destroy.
